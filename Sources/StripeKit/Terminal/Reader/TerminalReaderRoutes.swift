//
//  TerminalReaderRoutes.swift
//  StripeKit
//
//  Created by Andrew Edwards on 6/1/19.
//

import NIO
import NIOHTTP1

public protocol TerminalReaderRoutes: StripeAPIRoute {
    /// Creates a new TerminalReader object.
    ///
    /// - Parameters:
    ///   - registrationCode: A code generated by the reader used for registering to an account.
    ///   - label: Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
    ///   - location: The location to assign the reader to. If no location is specified, the reader will be assigned to the accountâ€™s default location.
    ///   - metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    ///   - expand: An array of properties to expand
    /// - Returns: Returns a ``TerminalReader`` object if creation succeeds.
    func create(location: String,
                registrationCode: String,
                label: String?,
                metadata: [String: String]?,
                expand: [String]?) async throws -> TerminalReader
    
    /// Retrieves a TerminalReader object.
    ///
    /// - Parameter reader: The identifier of the reader to be retrieved.
    ///   - expand: An array of properties to expand
    /// - Returns: Returns a ``TerminalReader`` object if a valid identifier was provided.
    func retrieve(reader: String, expand: [String]?) async throws -> TerminalReader
    
    /// Updates a TerminalReader object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    ///
    /// - Parameters:
    ///   - reader: The identifier of the reader to be updated.
    ///   - label: The new label of the reader.
    ///   - metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    ///   - expand: An array of properties to expand
    /// - Returns: Returns an updated ``TerminalReader`` object if a valid identifier was provided.
    func update(reader: String,
                label: String?,
                metadata: [String: String]?,
                expand: [String]?) async throws -> TerminalReader
    
    /// Deletes a TerminalReader object.
    ///
    /// - Parameter reader: The identifier of the reader to be deleted.
    /// - Returns: Returns the ``TerminalReader`` object that was deleted.
    func delete(reader: String) async throws -> DeletedObject
    
    /// Returns a list of TerminalReader objects.
    ///
    /// - Parameter filter: A dictionary that will be used for the query parameters. [See More](https://stripe.com/docs/api/terminal/readers/list)
    /// - Returns: A dictionary with a `data` property that contains an array of up to `limit` readers, starting after reader `starting_after`. Each entry in the array is a separate Terminal ``TerminalReader`` object. If no more readers are available, the resulting array will be empty.
    func listAll(filter: [String: Any]?) async throws -> TerminalReaderList
    
    /// Initiates a payment flow on a TerminalReader.
    /// - Parameters:
    ///   - reader: The identifier of the reader.
    ///   - paymentIntent: PaymentIntent ID
    ///   - processConfig: Configuration overrides
    ///   - expand: An array of properties to expand
    /// - Returns: Returns an updated ``TerminalReader`` resource.
    func handoffPaymentIntent(reader: String,
                              paymentIntent: String,
                              processConfig: [String: Any]?,
                              expand: [String]?) async throws -> TerminalReader
    
    /// Initiates a setup intent flow on a TerminalReader.
    /// - Parameters:
    ///   - reader: The identifier of the reader.
    ///   - customerConsentCollected: Customer Consent Collected
    ///   - setupIntent: SetupIntent ID
    ///   - expand: An array of properties to expand
    /// - Returns: Returns an updated ``TerminalReader`` resource.
    func handoffSetupIntent(reader: String,
                            customerConsentCollected: Bool,
                            setupIntent: String,
                            expand: [String]?) async throws -> TerminalReader
    
    /// Sets reader display to show cart details.
    /// - Parameters:
    ///   - reader: The identifier of the reader.
    ///   - type: Type
    ///   - cart: Cart
    ///   - expand: An array of properties to expand
    /// - Returns: Returns an updated ``TerminalReader`` resource.
    func setupReaderDisplay(reader: String,
                            type: String,
                            cart: [String: Any]?,
                            expand: [String]?) async throws -> TerminalReader
    
    /// Initiates a refund on a TerminalReader
    /// - Parameters:
    ///   - reader: The identifier of the reader.
    ///   - amount: A positive integer in cents representing how much of this charge to refund.
    ///   - charge: ID of the Charge to refund.
    ///   - metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    ///   - paymentIntent: ID of the PaymentIntent to refund.
    ///   - refundApplicationFee: Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
    ///   - reverseTransfer: Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
    ///   - expand: An array of properties to expand
    /// - Returns: Returns an updated ``TerminalReader`` resource.
    func refund(reader: String,
                amount: Int,
                charge: String?,
                metadata: [String: String]?,
                paymentIntent: String?,
                refundApplicationFee: Bool?,
                reverseTransfer: Bool?,
                expand: [String]?) async throws -> TerminalReader
    
    
    /// Cancels the current reader action.
    /// - Parameters:
    ///   - reader: The identifier of the reader.
    ///   - expand: An array of properties to expand
    /// - Returns: Returns an updated ``TerminalReader`` resource.
    func cancelCurrentAction(reader: String, expand: [String]?) async throws -> TerminalReader
    
    /// Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.
    /// - Parameters:
    ///   - reader: The identifier of the reader.
    ///   - cardPresent: Simulated data for the `card_present` payment method.
    ///   - type: Simulated payment type.
    ///   - amountTip: Simulated on-reader tip amount.
    ///   - interacPresent: Simulated data for the `interac_present` payment method.
    ///   - expand: Specifies which fields in the response should be expanded.
    /// - Returns: Returns an updated ``TerminalReader`` resource.
    func simulatePresentPaymentMethod(reader: String,
                                      cardPresent: [String: Any]?,
                                      type: String?,
                                      amountTip: Int?,
                                      interacPresent: [String: Any]?,
                                      expand: [String]?) async throws -> TerminalReader
}

public struct StripeTerminalReaderRoutes: TerminalReaderRoutes {
    public var headers: HTTPHeaders = [:]
    
    private let apiHandler: StripeAPIHandler
    private let terminalreaders = APIBase + APIVersion + "terminal/readers"
    private let testhelpers = APIBase + APIVersion + "test_helpers/terminal/readers"
    
    init(apiHandler: StripeAPIHandler) {
        self.apiHandler = apiHandler
    }
    
    public func create(location: String,
                       registrationCode: String,
                       label: String? = nil,
                       metadata: [String: String]? = nil,
                       expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = ["location": location,
                                   "registration_code": registrationCode]
        
        if let label {
            body["label"] = label
        }
        
        if let metadata {
            metadata.forEach { body["metadata[\($0)]"] = $1 }
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: terminalreaders, body: .string(body.queryParameters), headers: headers)
    }
    
    public func retrieve(reader: String, expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = [:]
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .GET, path: "\(terminalreaders)/\(reader)", body: .string(body.queryParameters), headers: headers)
    }
    
    public func update(reader: String,
                       label: String? = nil,
                       metadata: [String: String]? = nil,
                       expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = [:]
        
        if let label {
            body["label"] = label
        }
        
        if let metadata {
            metadata.forEach { body["metadata[\($0)]"] = $1 }
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: "\(terminalreaders)/\(reader)", body: .string(body.queryParameters), headers: headers)
    }
    
    public func delete(reader: String) async throws -> DeletedObject {
        try await apiHandler.send(method: .DELETE, path: "\(terminalreaders)/\(reader)", headers: headers)
    }
    
    public func listAll(filter: [String: Any]? = nil) async throws -> TerminalReaderList {
        var queryParams = ""
        if let filter {
            queryParams = filter.queryParameters
        }
        
        return try await apiHandler.send(method: .GET, path: terminalreaders, query: queryParams, headers: headers)
    }
    
    public func handoffPaymentIntent(reader: String,
                                     paymentIntent: String,
                                     processConfig: [String: Any]? = nil,
                                     expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = ["payment_intent": paymentIntent]
        
        if let processConfig {
            processConfig.forEach { body["process_config[\($0)]"] = $1 }
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: terminalreaders, query: "\(terminalreaders)/\(reader)/process_payment_intent", body: .string(body.queryParameters), headers: headers)
    }
    
    public func handoffSetupIntent(reader: String,
                                   customerConsentCollected: Bool,
                                   setupIntent: String,
                                   expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = ["customer_consent_collected": customerConsentCollected,
                                   "setup_intent": setupIntent]
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: terminalreaders, query: "\(terminalreaders)/\(reader)/process_setup_intent", body: .string(body.queryParameters), headers: headers)
    }
    
    public func setupReaderDisplay(reader: String,
                                   type: String,
                                   cart: [String: Any]? = nil,
                                   expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = ["type": type]
        
        if let cart {
            cart.forEach { body["cart[\($0)]"] = $1 }
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: terminalreaders, query: "\(terminalreaders)/\(reader)/set_reader_display", body: .string(body.queryParameters), headers: headers)
    }
    
    public func refund(reader: String,
                       amount: Int,
                       charge: String? = nil,
                       metadata: [String: String]? = nil,
                       paymentIntent: String? = nil,
                       refundApplicationFee: Bool? = nil,
                       reverseTransfer: Bool? = nil,
                       expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = ["amount": amount]
        
        if let charge {
            body["charge"] = charge
        }
        
        if let metadata {
            metadata.forEach { body["metadata[\($0)]"] = $1 }
        }
        
        if let paymentIntent {
            body["payment_intent"] = paymentIntent
        }
        
        if let refundApplicationFee {
            body["refund_application_fee"] = refundApplicationFee
        }
        
        if let reverseTransfer {
            body["reverse_transfer"] = reverseTransfer
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: terminalreaders, query: "\(terminalreaders)/\(reader)/refund_payment", body: .string(body.queryParameters), headers: headers)
    }
    
    public func cancelCurrentAction(reader: String, expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = [:]
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: terminalreaders, query: "\(terminalreaders)/\(reader)/cancel_action", body: .string(body.queryParameters), headers: headers)
    }
    
    public func simulatePresentPaymentMethod(reader: String,
                                             cardPresent: [String: Any]? = nil,
                                             type: String? = nil,
                                             amountTip: Int? = nil,
                                             interacPresent: [String: Any]? = nil,
                                             expand: [String]? = nil) async throws -> TerminalReader {
        var body: [String: Any] = [:]
        
        if let cardPresent {
            cardPresent.forEach { body["card_present[\($0)]"] = $1 }
        }
        
        if let type {
            body["type"] = type
        }
        
        if let amountTip {
            body["amount_tip"] = amountTip
        }
        
        if let interacPresent {
            interacPresent.forEach { body["interac_present[\($0)]"] = $1 }
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: terminalreaders, query: "\(testhelpers)/\(reader)/present_payment_method", body: .string(body.queryParameters), headers: headers)
    }
}
