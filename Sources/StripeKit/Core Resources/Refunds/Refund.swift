//
//  Refund.swift
//  Stripe
//
//  Created by Anthony Castelli on 4/15/17.
//
//

import Foundation

/// The [Refund Object](https://stripe.com/docs/api/refunds/object) .
public struct Refund: Codable {
    /// Unique identifier for the object.
    public var id: String
    /// Amount, in cents.
    public var amount: Int?
    /// ID of the charge that was refunded.
    @Expandable<Charge> public var charge: String?
    /// Three-letter ISO currency code, in lowercase. Must be a supported currency.
    public var currency: Currency?
    /// An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
    public var description: String?
    /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// ID of the PaymentIntent that was refunded.
    @Expandable<PaymentIntent> public var paymentIntent: String?
    /// Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    public var reason: RefundReason?
    /// Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our refunds documentation for more details.
    public var status: RefundStatus?
    /// String representing the object’s type. Objects of the same type share the same value.
    public var object: String
    /// Balance transaction that describes the impact on your account balance.
    @Expandable<BalanceTransaction> public var balanceTransaction: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Date
    /// If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    @Expandable<BalanceTransaction> public var failureBalanceTransaction: String?
    ///  the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request` or `unknown`.
    public var failureReason: RefundFailureReason?
    /// For payment methods without native refund support (e.g., Konbini, PromptPay), email for the customer to receive refund instructions.
    public var instructionsEmail: String?
    /// If the refund has a status of `requires_action`, this property will describe what the refund needs in order to continue processing.
    public var nextAction: RefundNextAction?
    /// This is the transaction number that appears on email receipts sent for this refund.
    public var receiptNumber: String?
    /// The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
    @Expandable<TransferReversal> public var sourceTransferReversal: String?
    /// If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
    @Expandable<TransferReversal> public var transferReversal: String?
    
    public init(id: String,
                amount: Int? = nil,
                charge: String? = nil,
                currency: Currency? = nil,
                description: String? = nil,
                metadata: [String : String]? = nil,
                paymentIntent: String? = nil,
                reason: RefundReason? = nil,
                status: RefundStatus? = nil,
                object: String,
                balanceTransaction: String? = nil,
                created: Date,
                failureBalanceTransaction: String? = nil,
                failureReason: RefundFailureReason? = nil,
                instructionsEmail: String? = nil,
                nextAction: RefundNextAction? = nil,
                receiptNumber: String? = nil,
                sourceTransferReversal: String? = nil,
                transferReversal: String? = nil) {
        self.id = id
        self.amount = amount
        self._charge = Expandable(id: charge)
        self.currency = currency
        self.description = description
        self.metadata = metadata
        self._paymentIntent = Expandable(id: paymentIntent)
        self.reason = reason
        self.status = status
        self.object = object
        self._balanceTransaction = Expandable(id: balanceTransaction)
        self.created = created
        self._failureBalanceTransaction = Expandable(id: failureBalanceTransaction)
        self.failureReason = failureReason
        self.instructionsEmail = instructionsEmail
        self.nextAction = nextAction
        self.receiptNumber = receiptNumber
        self._sourceTransferReversal = Expandable(id: sourceTransferReversal)
        self._transferReversal = Expandable(id: transferReversal)
    }
}

public enum RefundFailureReason: String, Codable {
    case lostOrStolenCard = "lost_or_stolen_card"
    case expiredOrCanceledCard = "expired_or_canceled_card"
    case chargeForPendingRefundDisputed = "charge_for_pending_refund_disputed"
    case insufficientFunds = "insufficient_funds"
    case declined
    case merchantRequest = "merchant_request"
    case unknown
}

public enum RefundStatus: String, Codable {
    case pending
    case succeeded
    case failed
    case canceled
}

public enum RefundReason: String, Codable {
    case duplicate
    case fraudulent
    case requestedByCustomer = "requested_by_customer"
    case expiredUncapturedCharge = "expired_uncaptured_charge"
}

public struct RefundNextAction: Codable {
    /// Contains the refund details.
    public var displayDetails: RefundNextActionDisplayDetails?
    /// Type of the next action to perform.
    public var type: String?
    
    public init(displayDetails: RefundNextActionDisplayDetails? = nil,
                type: String? = nil) {
        self.displayDetails = displayDetails
        self.type = type
    }
}

public struct RefundNextActionDisplayDetails: Codable {
    /// Contains information about the email sent to the customer.
    public var emailSent: RefundNextActionDisplayDetailsEmailSent?
    /// The expiry timestamp.
    public var expiresAt: Date?
    
    public init(emailSent: RefundNextActionDisplayDetailsEmailSent? = nil,
                expiresAt: Date? = nil) {
        self.emailSent = emailSent
        self.expiresAt = expiresAt
    }
}

public struct RefundNextActionDisplayDetailsEmailSent: Codable {
    /// The timestamp when the email was sent.
    public var emailSentAt: Date?
    /// The recipient’s email address.
    public var emailSentTo: String?
    
    public init(emailSentAt: Date? = nil,
                emailSentTo: String? = nil) {
        self.emailSentAt = emailSentAt
        self.emailSentTo = emailSentTo
    }
}

public struct RefundsList: Codable {
    public var object: String
    public var hasMore: Bool?
    public var url: String?
    public var data: [Refund]?
    
    public init(object: String,
                hasMore: Bool? = nil,
                url: String? = nil,
                data: [Refund]? = nil) {
        self.object = object
        self.hasMore = hasMore
        self.url = url
        self.data = data
    }
}
