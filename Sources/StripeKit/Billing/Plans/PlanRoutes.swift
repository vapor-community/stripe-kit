//
//  PlanRoutes.swift
//  Stripe
//
//  Created by Andrew Edwards on 5/29/17.
//
//

import NIO
import NIOHTTP1

public protocol PlanRoutes: StripeAPIRoute {
    /// You can create plans using the API, or in the Stripe Dashboard.
    ///
    /// - Parameters:
    ///   - amount: A positive integer in cents (or 0 for a free plan) representing how much to charge on a recurring basis.
    ///   - currency: Three-letter ISO currency code, in lowercase. Must be a supported currency.
    ///   - interval: Specifies billing frequency. Either day, week, month or year.
    ///   - product: The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a service product.
    ///   - active: Whether the plan is currently available for new subscriptions. Defaults to `true`.
    ///   - metadata: A set of key-value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.
    ///   - nickname: A brief description of the plan, hidden from customers.
    ///   - id: An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.
    ///   - tiers: Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    ///   - tiersMode: Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
    ///   - aggregateUsage: Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.
    ///   - amountDecimal: Same as amount, but accepts a decimal value with at most 12 decimal places. Only one of amount and amount_decimal can be set.
    ///   - billingScheme: Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    ///   - intervalCount: The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
    ///   - transformUsage: Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
    ///   - trialPeriodDays: Default number of trial days when subscribing a customer to this plan using `trial_from_plan=true`.
    ///   - usageType: Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.
    ///   - expand: Specifies which fields in the response should be expanded.
    /// - Returns: Returns the plan object
    func create(amount: Int?,
                currency: Currency,
                interval: PlanInterval,
                product: Any,
                active: Bool?,
                metadata: [String: String]?,
                nickname: String?,
                id: String?,
                tiers: [String: Any]?,
                tiersMode: PlanTiersMode?,
                aggregateUsage: PlanAggregateUsage?,
                amountDecimal: Int?,
                billingScheme: PlanBillingScheme?,
                intervalCount: Int?,
                transformUsage: [String: Any]?,
                trialPeriodDays: Int?,
                usageType: PlanUsageType?,
                expand: [String]?) async throws -> Plan
    
    /// Retrieves the plan with the given ID.
    ///
    /// - Parameters:
    ///   - plan: The ID of the desired plan.
    ///   - expand: Specifies which fields in the response should be expanded.
    /// - Returns: Returns a plan if a valid plan ID was provided. Returns an error otherwise.
    func retrieve(plan: String, expand: [String]?) async throws -> Plan
    
    /// Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.
    ///
    /// - Parameters:
    ///   - plan: The identifier of the plan to be updated.
    ///   - active: Whether the plan is currently available for new subscriptions.
    ///   - metadata: A set of key-value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.
    ///   - nickname: A brief description of the plan, hidden from customers. This will be unset if you POST an empty value.
    ///   - product: The product the plan belongs to. Note that after updating, statement descriptors and line items of the plan in active subscriptions will be affected.
    ///   - trialPeriodDays: Default number of trial days when subscribing a customer to this plan using `trial_from_plan=true`.
    ///   - expand: Specifies which fields in the response should be expanded.
    /// - Returns: The updated plan object is returned upon success. Otherwise, this call returns an error.
    func update(plan: String,
                active: Bool?,
                metadata: [String: String]?,
                nickname: String?,
                product: Any?,
                trialPeriodDays: Int?,
                expand: [String]?) async throws -> Plan
    
    /// Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.
    ///
    /// - Parameter plan: The identifier of the plan to be deleted.
    /// - Returns: An object with the deleted plan’s ID and a deleted flag upon success. Otherwise, this call returns an error, such as if the plan has already been deleted.
    func delete(plan: String) async throws -> DeletedObject
    
    /// Returns a list of your plans.
    ///
    /// - Parameter filter: A dictionary that will be used for the query parameters. [See More →](https://stripe.com/docs/api/plans/list)
    /// - Returns: A dictionary with a `data` property that contains an array of up to `limit` plans, starting after plan `starting_after`. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty. This request should never return an error.
    func listAll(filter: [String: Any]?) async throws -> PlanList
}

public struct StripePlanRoutes: PlanRoutes {
    public var headers: HTTPHeaders = [:]
    
    private let apiHandler: StripeAPIHandler
    private let plans = APIBase + APIVersion + "plans"
    
    init(apiHandler: StripeAPIHandler) {
        self.apiHandler = apiHandler
    }
    
    public func create(amount: Int? = nil,
                       currency: Currency,
                       interval: PlanInterval,
                       product: Any,
                       active: Bool? = nil,
                       metadata: [String: String]? = nil,
                       nickname: String? = nil,
                       id: String? = nil,
                       tiers: [String: Any]? = nil,
                       tiersMode: PlanTiersMode? = nil,
                       aggregateUsage: PlanAggregateUsage? = nil,
                       amountDecimal: Int? = nil,
                       billingScheme: PlanBillingScheme? = nil,
                       intervalCount: Int? = nil,
                       transformUsage: [String: Any]? = nil,
                       trialPeriodDays: Int? = nil,
                       usageType: PlanUsageType? = nil,
                       expand: [String]? = nil) async throws -> Plan {
        var body: [String: Any] = ["currency": currency.rawValue,
                                   "interval": interval.rawValue]
        
        if let amount {
            body["amount"] = amount
        }
        
        if let product = product as? String {
            body["product"] = product
        } else if let product = product as? [String: Any]  {
            product.forEach { body["product[\($0)]"] = $1 }
        }
        
        if let active {
            body["active"] = active
        }
        
        if let metadata {
            metadata.forEach { body["metadata[\($0)]"] = $1 }
        }
        
        if let nickname {
            body["nickname"] = nickname
        }
        
        if let id {
            body["id"] = id
        }
        
        if let tiers {
            tiers.forEach { body["tiers[\($0)]"] = $1 }
        }
        
        if let tiersMode {
            body["tiers_mode"] = tiersMode.rawValue
        }
        
        if let aggregateUsage {
            body["aggregate_usage"] = aggregateUsage.rawValue
        }
        
        if let amountDecimal {
            body["amount_decimal"] = amountDecimal
        }
        
        if let billingScheme {
            body["billing_scheme"] = billingScheme.rawValue
        }
        
        if let intervalCount {
            body["interval_count"] = intervalCount
        }
        
        if let transformUsage {
            transformUsage.forEach { body["transform_usage[\($0)]"] = $1 }
        }
        
        if let trialPeriodDays {
            body["trial_period_days"] = trialPeriodDays
        }
        
        if let usageType {
            body["usage_type"] = usageType.rawValue
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: plans, body: .string(body.queryParameters), headers: headers)
    }

    public func retrieve(plan: String, expand: [String]? = nil) async throws -> Plan {
        var queryParams = ""
        if let expand {
            queryParams = ["expand": expand].queryParameters
        }
        
        return try await apiHandler.send(method: .GET, path: "\(plans)/\(plan)", query: queryParams, headers: headers)
    }
    
    public func update(plan: String,
                       active: Bool? = nil,
                       metadata: [String: String]? = nil,
                       nickname: String? = nil,
                       product: Any? = nil,
                       trialPeriodDays: Int? = nil,
                       expand: [String]? = nil) async throws -> Plan {
        var body: [String: Any] = [:]
        
        if let active {
            body["active"] = active
        }
        
        if let metadata {
            metadata.forEach { body["metadata[\($0)]"] = $1 }
        }

        if let nickname {
            body["nickname"] = nickname
        }
        
        if let product = product as? String {
            body["product"] = product
        } else if let product = product as? [String: Any]  {
            product.forEach { body["product[\($0)]"] = $1 }
        }
        
        if let trialPeriodDays {
            body["trial_period_days"] = trialPeriodDays
        }
        
        if let expand {
            body["expand"] = expand
        }
        
        return try await apiHandler.send(method: .POST, path: "\(plans)/\(plan)", body: .string(body.queryParameters), headers: headers)
    }
    
    public func delete(plan: String) async throws -> DeletedObject {
        try await apiHandler.send(method: .DELETE, path: "\(plans)/\(plan)", headers: headers)
    }
    
    public func listAll(filter: [String: Any]? = nil) async throws -> PlanList {
        var queryParams = ""
        if let filter {
            queryParams = filter.queryParameters
        }
        
        return try await apiHandler.send(method: .GET, path: plans, query: queryParams, headers: headers)
    }
}
